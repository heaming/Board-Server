spring:
  datasource:
    # mysql
    jdbc-url: jdbc:log4jdbc:mysql://localhost:3306/boardserver
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    jdbc-url: jdbc:mysql://localhost:3306/boardserver
    username: user
    password: user
  # jpa
  jpa:
    hibernate:
      ddl-auto: none
#      naming:
#        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
#        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
#redis
  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6375
      password:
      repositories:
        enabled: false
expire:
  defaultTime: 3600 #1M
#        physical_naming_strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy


mybatis:
  mapper-locations: classpath:mappers/*.xml

logging:
  level:
    # 1. jdbc.sqlonly : SQL문 만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.
    # 2. jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.
    # 3. jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
    # 4. jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
    # 5. jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
    jdbc.sqlonly: DEBUG
    org.springframework.web: DEBUG
#    com.zaxxer.hikari.HikariDataSource: ERROR



